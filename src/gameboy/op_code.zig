const std = @import("std");

const settings = @import("../settings.zig");

pub const OpCodeErrors = error {
    UnknownOpCode
};

pub const Operands = enum {
    A,
    F,
    AF,
    B,
    C,
    BC,
    D,
    E,
    DE,
    H,
    L,
    HL,

    SP,

    AF_Addr,
    BC_Addr,
    DE_Addr,
    HL_Addr,

    Cond_Z,
    Cond_NZ,
    Cond_C,
    Cond_NC,

    Bit_0,
    Bit_1,
    Bit_2,
    Bit_3,
    Bit_4,
    Bit_5,
    Bit_6,
    Bit_7,

    d8,
    d16,
    r8,
    d16_Addr,

    True, // Used as an easy way to handle non-conditional JR jumps
    False,

    Hex_00,
    Hex_10,
    Hex_20,
    Hex_30,
    Hex_08,
    Hex_18,
    Hex_28,
    Hex_38,
};

pub const Instructions = enum {
    NOP,

    LD8,
    LD8i,
    LD8io_to,
    LD8io_from,
    LD8d,
    LD16,

    CP,
    OR,
    AND,

    INC8,
    INC16,
    DEC8,
    DEC16,

    ADC,
    ADD16_SPi8,
    ADD8,
    ADD16,
    SUB,
    SBC,

    XOR,
    CCF,

    CALL,
    JP,
    JR,
    RET,
    RETI,
    RST,

    PUSH,
    POP,

    BIT,
    SET,
    RES,
    SWAP,

    RR,
    RRC,
    SRL,
    SRA,
    RL,
    RLC,
    SLA,

    EI,
    DI,
    HALT,

    DAA,

    CPL,
    SCF,
};

pub const OperationFlagStates = enum {
    Set,
    Reset,
    Unchanged,
    Dependent
};

pub const OperationFlags = struct {
    Z: OperationFlagStates = .Unchanged, // Zero
    N: OperationFlagStates = .Unchanged, // Negative
    H: OperationFlagStates = .Unchanged, // Half-Carry
    C: OperationFlagStates = .Unchanged // Carry
};

pub const OpCodeInfo = struct {
    pub fn init(inst: Instructions,
        op_1: ?Operands,
        op_2: ?Operands,
        length: u8,
        cycles_taken: u8,
        flags: OperationFlags) OpCodeInfo {
        return .{
            .inst = inst,
            .op_1 = op_1,
            .op_2 = op_2,
            .length = length,
            .cycles_taken = cycles_taken,
            .flags = flags
        };
    }

    inst: Instructions,
    op_1: ?Operands,
    op_2: ?Operands,
    length: u8,
    cycles_taken: u8,
    flags: OperationFlags
};

pub fn getCBOpCodeInfo(op_code: u8) OpCodeErrors!OpCodeInfo {
    if (comptime settings.debug) {
        std.debug.print("HANDLED CB opcode 0x{X}\n", .{op_code});
    }

    return switch(op_code) {
        0x00 => OpCodeInfo.init(.RLC, .B, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x01 => OpCodeInfo.init(.RLC, .C, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x02 => OpCodeInfo.init(.RLC, .D, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x03 => OpCodeInfo.init(.RLC, .E, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x04 => OpCodeInfo.init(.RLC, .H, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x05 => OpCodeInfo.init(.RLC, .L, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x06 => OpCodeInfo.init(.RLC, .HL_Addr, null, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x07 => OpCodeInfo.init(.RLC, .A, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x08 => OpCodeInfo.init(.RRC, .B, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x09 => OpCodeInfo.init(.RRC, .C, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x0A => OpCodeInfo.init(.RRC, .D, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x0B => OpCodeInfo.init(.RRC, .E, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x0C => OpCodeInfo.init(.RRC, .H, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x0D => OpCodeInfo.init(.RRC, .L, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x0E => OpCodeInfo.init(.RRC, .HL_Addr, null, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x0F => OpCodeInfo.init(.RRC, .A, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x10 => OpCodeInfo.init(.RL, .B, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x11 => OpCodeInfo.init(.RL, .C, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x12 => OpCodeInfo.init(.RL, .D, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x13 => OpCodeInfo.init(.RL, .E, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x14 => OpCodeInfo.init(.RL, .H, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x15 => OpCodeInfo.init(.RL, .L, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x16 => OpCodeInfo.init(.RL, .HL_Addr, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x17 => OpCodeInfo.init(.RL, .A, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x18 => OpCodeInfo.init(.RR, .B, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x19 => OpCodeInfo.init(.RR, .C, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x1A => OpCodeInfo.init(.RR, .D, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x1B => OpCodeInfo.init(.RR, .E, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x1C => OpCodeInfo.init(.RR, .H, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x1D => OpCodeInfo.init(.RR, .L, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x1E => OpCodeInfo.init(.RR, .HL_Addr, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x1F => OpCodeInfo.init(.RR, .A, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x20 => OpCodeInfo.init(.SLA, .B, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x21 => OpCodeInfo.init(.SLA, .C, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x22 => OpCodeInfo.init(.SLA, .D, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x23 => OpCodeInfo.init(.SLA, .E, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x24 => OpCodeInfo.init(.SLA, .H, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x25 => OpCodeInfo.init(.SLA, .L, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x26 => OpCodeInfo.init(.SLA, .HL_Addr, null, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x27 => OpCodeInfo.init(.SLA, .A, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x28 => OpCodeInfo.init(.SRA, .B, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x29 => OpCodeInfo.init(.SRA, .C, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x2A => OpCodeInfo.init(.SRA, .D, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x2B => OpCodeInfo.init(.SRA, .E, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x2C => OpCodeInfo.init(.SRA, .H, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x2D => OpCodeInfo.init(.SRA, .L, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x2E => OpCodeInfo.init(.SRA, .HL_Addr, null, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x2F => OpCodeInfo.init(.SRA, .A, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x30 => OpCodeInfo.init(.SWAP, .B, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0x31 => OpCodeInfo.init(.SWAP, .C, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0x32 => OpCodeInfo.init(.SWAP, .D, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0x33 => OpCodeInfo.init(.SWAP, .E, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0x34 => OpCodeInfo.init(.SWAP, .H, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0x35 => OpCodeInfo.init(.SWAP, .L, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0x36 => OpCodeInfo.init(.SWAP, .HL_Addr, null, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0x37 => OpCodeInfo.init(.SWAP, .A, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0x38 => OpCodeInfo.init(.SRL, .B, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x39 => OpCodeInfo.init(.SRL, .C, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x3A => OpCodeInfo.init(.SRL, .D, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x3B => OpCodeInfo.init(.SRL, .E, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x3C => OpCodeInfo.init(.SRL, .H, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x3D => OpCodeInfo.init(.SRL, .L, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x3E => OpCodeInfo.init(.SRL, .HL_Addr, null, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x3F => OpCodeInfo.init(.SRL, .A, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x40 => OpCodeInfo.init(.BIT, .Bit_0, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x41 => OpCodeInfo.init(.BIT, .Bit_0, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x42 => OpCodeInfo.init(.BIT, .Bit_0, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x43 => OpCodeInfo.init(.BIT, .Bit_0, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x44 => OpCodeInfo.init(.BIT, .Bit_0, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x45 => OpCodeInfo.init(.BIT, .Bit_0, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x46 => OpCodeInfo.init(.BIT, .Bit_0, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x47 => OpCodeInfo.init(.BIT, .Bit_0, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x48 => OpCodeInfo.init(.BIT, .Bit_1, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x49 => OpCodeInfo.init(.BIT, .Bit_1, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x4A => OpCodeInfo.init(.BIT, .Bit_1, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x4B => OpCodeInfo.init(.BIT, .Bit_1, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x4C => OpCodeInfo.init(.BIT, .Bit_1, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x4D => OpCodeInfo.init(.BIT, .Bit_1, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x4E => OpCodeInfo.init(.BIT, .Bit_1, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x4F => OpCodeInfo.init(.BIT, .Bit_1, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x50 => OpCodeInfo.init(.BIT, .Bit_2, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x51 => OpCodeInfo.init(.BIT, .Bit_2, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x52 => OpCodeInfo.init(.BIT, .Bit_2, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x53 => OpCodeInfo.init(.BIT, .Bit_2, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x54 => OpCodeInfo.init(.BIT, .Bit_2, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x55 => OpCodeInfo.init(.BIT, .Bit_2, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x56 => OpCodeInfo.init(.BIT, .Bit_2, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x57 => OpCodeInfo.init(.BIT, .Bit_2, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x58 => OpCodeInfo.init(.BIT, .Bit_3, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x59 => OpCodeInfo.init(.BIT, .Bit_3, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x5A => OpCodeInfo.init(.BIT, .Bit_3, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x5B => OpCodeInfo.init(.BIT, .Bit_3, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x5C => OpCodeInfo.init(.BIT, .Bit_3, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x5D => OpCodeInfo.init(.BIT, .Bit_3, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x5E => OpCodeInfo.init(.BIT, .Bit_3, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x5F => OpCodeInfo.init(.BIT, .Bit_3, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x60 => OpCodeInfo.init(.BIT, .Bit_4, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x61 => OpCodeInfo.init(.BIT, .Bit_4, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x62 => OpCodeInfo.init(.BIT, .Bit_4, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x63 => OpCodeInfo.init(.BIT, .Bit_4, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x64 => OpCodeInfo.init(.BIT, .Bit_4, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x65 => OpCodeInfo.init(.BIT, .Bit_4, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x66 => OpCodeInfo.init(.BIT, .Bit_4, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x67 => OpCodeInfo.init(.BIT, .Bit_4, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x68 => OpCodeInfo.init(.BIT, .Bit_5, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x69 => OpCodeInfo.init(.BIT, .Bit_5, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x6A => OpCodeInfo.init(.BIT, .Bit_5, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x6B => OpCodeInfo.init(.BIT, .Bit_5, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x6C => OpCodeInfo.init(.BIT, .Bit_5, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x6D => OpCodeInfo.init(.BIT, .Bit_5, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x6E => OpCodeInfo.init(.BIT, .Bit_5, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x6F => OpCodeInfo.init(.BIT, .Bit_5, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x70 => OpCodeInfo.init(.BIT, .Bit_6, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x71 => OpCodeInfo.init(.BIT, .Bit_6, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x72 => OpCodeInfo.init(.BIT, .Bit_6, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x73 => OpCodeInfo.init(.BIT, .Bit_6, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x74 => OpCodeInfo.init(.BIT, .Bit_6, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x75 => OpCodeInfo.init(.BIT, .Bit_6, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x76 => OpCodeInfo.init(.BIT, .Bit_6, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x77 => OpCodeInfo.init(.BIT, .Bit_6, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x78 => OpCodeInfo.init(.BIT, .Bit_7, .B, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x79 => OpCodeInfo.init(.BIT, .Bit_7, .C, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x7A => OpCodeInfo.init(.BIT, .Bit_7, .D, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x7B => OpCodeInfo.init(.BIT, .Bit_7, .E, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x7C => OpCodeInfo.init(.BIT, .Bit_7, .H, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x7D => OpCodeInfo.init(.BIT, .Bit_7, .L, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x7E => OpCodeInfo.init(.BIT, .Bit_7, .HL_Addr, 2, 16, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x7F => OpCodeInfo.init(.BIT, .Bit_7, .A, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Unchanged }),
        0x80 => OpCodeInfo.init(.RES, .Bit_0, .B, 2, 8, .{}),
        0x81 => OpCodeInfo.init(.RES, .Bit_0, .C, 2, 8, .{}),
        0x82 => OpCodeInfo.init(.RES, .Bit_0, .D, 2, 8, .{}),
        0x83 => OpCodeInfo.init(.RES, .Bit_0, .E, 2, 8, .{}),
        0x84 => OpCodeInfo.init(.RES, .Bit_0, .H, 2, 8, .{}),
        0x85 => OpCodeInfo.init(.RES, .Bit_0, .L, 2, 8, .{}),
        0x86 => OpCodeInfo.init(.RES, .Bit_0, .HL_Addr, 2, 16, .{}),
        0x87 => OpCodeInfo.init(.RES, .Bit_0, .A, 2, 8, .{}),
        0x88 => OpCodeInfo.init(.RES, .Bit_1, .B, 2, 8, .{}),
        0x89 => OpCodeInfo.init(.RES, .Bit_1, .C, 2, 8, .{}),
        0x8A => OpCodeInfo.init(.RES, .Bit_1, .D, 2, 8, .{}),
        0x8B => OpCodeInfo.init(.RES, .Bit_1, .E, 2, 8, .{}),
        0x8C => OpCodeInfo.init(.RES, .Bit_1, .H, 2, 8, .{}),
        0x8D => OpCodeInfo.init(.RES, .Bit_1, .L, 2, 8, .{}),
        0x8E => OpCodeInfo.init(.RES, .Bit_1, .HL_Addr, 2, 16, .{}),
        0x8F => OpCodeInfo.init(.RES, .Bit_1, .A, 2, 8, .{}),
        0x90 => OpCodeInfo.init(.RES, .Bit_2, .B, 2, 8, .{}),
        0x91 => OpCodeInfo.init(.RES, .Bit_2, .C, 2, 8, .{}),
        0x92 => OpCodeInfo.init(.RES, .Bit_2, .D, 2, 8, .{}),
        0x93 => OpCodeInfo.init(.RES, .Bit_2, .E, 2, 8, .{}),
        0x94 => OpCodeInfo.init(.RES, .Bit_2, .H, 2, 8, .{}),
        0x95 => OpCodeInfo.init(.RES, .Bit_2, .L, 2, 8, .{}),
        0x96 => OpCodeInfo.init(.RES, .Bit_2, .HL_Addr, 2, 16, .{}),
        0x97 => OpCodeInfo.init(.RES, .Bit_2, .A, 2, 8, .{}),
        0x98 => OpCodeInfo.init(.RES, .Bit_3, .B, 2, 8, .{}),
        0x99 => OpCodeInfo.init(.RES, .Bit_3, .C, 2, 8, .{}),
        0x9A => OpCodeInfo.init(.RES, .Bit_3, .D, 2, 8, .{}),
        0x9B => OpCodeInfo.init(.RES, .Bit_3, .E, 2, 8, .{}),
        0x9C => OpCodeInfo.init(.RES, .Bit_3, .H, 2, 8, .{}),
        0x9D => OpCodeInfo.init(.RES, .Bit_3, .L, 2, 8, .{}),
        0x9E => OpCodeInfo.init(.RES, .Bit_3, .HL_Addr, 2, 16, .{}),
        0x9F => OpCodeInfo.init(.RES, .Bit_3, .A, 2, 8, .{}),
        0xA0 => OpCodeInfo.init(.RES, .Bit_4, .B, 2, 8, .{}),
        0xA1 => OpCodeInfo.init(.RES, .Bit_4, .C, 2, 8, .{}),
        0xA2 => OpCodeInfo.init(.RES, .Bit_4, .D, 2, 8, .{}),
        0xA3 => OpCodeInfo.init(.RES, .Bit_4, .E, 2, 8, .{}),
        0xA4 => OpCodeInfo.init(.RES, .Bit_4, .H, 2, 8, .{}),
        0xA5 => OpCodeInfo.init(.RES, .Bit_4, .L, 2, 8, .{}),
        0xA6 => OpCodeInfo.init(.RES, .Bit_4, .HL_Addr, 2, 16, .{}),
        0xA7 => OpCodeInfo.init(.RES, .Bit_4, .A, 2, 8, .{}),
        0xA8 => OpCodeInfo.init(.RES, .Bit_5, .B, 2, 8, .{}),
        0xA9 => OpCodeInfo.init(.RES, .Bit_5, .C, 2, 8, .{}),
        0xAA => OpCodeInfo.init(.RES, .Bit_5, .D, 2, 8, .{}),
        0xAB => OpCodeInfo.init(.RES, .Bit_5, .E, 2, 8, .{}),
        0xAC => OpCodeInfo.init(.RES, .Bit_5, .H, 2, 8, .{}),
        0xAD => OpCodeInfo.init(.RES, .Bit_5, .L, 2, 8, .{}),
        0xAE => OpCodeInfo.init(.RES, .Bit_5, .HL_Addr, 2, 16, .{}),
        0xAF => OpCodeInfo.init(.RES, .Bit_5, .A, 2, 8, .{}),
        0xB0 => OpCodeInfo.init(.RES, .Bit_6, .B, 2, 8, .{}),
        0xB1 => OpCodeInfo.init(.RES, .Bit_6, .C, 2, 8, .{}),
        0xB2 => OpCodeInfo.init(.RES, .Bit_6, .D, 2, 8, .{}),
        0xB3 => OpCodeInfo.init(.RES, .Bit_6, .E, 2, 8, .{}),
        0xB4 => OpCodeInfo.init(.RES, .Bit_6, .H, 2, 8, .{}),
        0xB5 => OpCodeInfo.init(.RES, .Bit_6, .L, 2, 8, .{}),
        0xB6 => OpCodeInfo.init(.RES, .Bit_6, .HL_Addr, 2, 16, .{}),
        0xB7 => OpCodeInfo.init(.RES, .Bit_6, .A, 2, 8, .{}),
        0xB8 => OpCodeInfo.init(.RES, .Bit_7, .B, 2, 8, .{}),
        0xB9 => OpCodeInfo.init(.RES, .Bit_7, .C, 2, 8, .{}),
        0xBA => OpCodeInfo.init(.RES, .Bit_7, .D, 2, 8, .{}),
        0xBB => OpCodeInfo.init(.RES, .Bit_7, .E, 2, 8, .{}),
        0xBC => OpCodeInfo.init(.RES, .Bit_7, .H, 2, 8, .{}),
        0xBD => OpCodeInfo.init(.RES, .Bit_7, .L, 2, 8, .{}),
        0xBE => OpCodeInfo.init(.RES, .Bit_7, .HL_Addr, 2, 16, .{}),
        0xBF => OpCodeInfo.init(.RES, .Bit_7, .A, 2, 8, .{}),
        0xC0 => OpCodeInfo.init(.SET, .Bit_0, .B, 2, 8, .{}),
        0xC1 => OpCodeInfo.init(.SET, .Bit_0, .C, 2, 8, .{}),
        0xC2 => OpCodeInfo.init(.SET, .Bit_0, .D, 2, 8, .{}),
        0xC3 => OpCodeInfo.init(.SET, .Bit_0, .E, 2, 8, .{}),
        0xC4 => OpCodeInfo.init(.SET, .Bit_0, .H, 2, 8, .{}),
        0xC5 => OpCodeInfo.init(.SET, .Bit_0, .L, 2, 8, .{}),
        0xC6 => OpCodeInfo.init(.SET, .Bit_0, .HL_Addr, 2, 16, .{}),
        0xC7 => OpCodeInfo.init(.SET, .Bit_0, .A, 2, 8, .{}),
        0xC8 => OpCodeInfo.init(.SET, .Bit_1, .B, 2, 8, .{}),
        0xC9 => OpCodeInfo.init(.SET, .Bit_1, .C, 2, 8, .{}),
        0xCA => OpCodeInfo.init(.SET, .Bit_1, .D, 2, 8, .{}),
        0xCB => OpCodeInfo.init(.SET, .Bit_1, .E, 2, 8, .{}),
        0xCC => OpCodeInfo.init(.SET, .Bit_1, .H, 2, 8, .{}),
        0xCD => OpCodeInfo.init(.SET, .Bit_1, .L, 2, 8, .{}),
        0xCE => OpCodeInfo.init(.SET, .Bit_1, .HL_Addr, 2, 16, .{}),
        0xCF => OpCodeInfo.init(.SET, .Bit_1, .A, 2, 8, .{}),
        0xD0 => OpCodeInfo.init(.SET, .Bit_2, .B, 2, 8, .{}),
        0xD1 => OpCodeInfo.init(.SET, .Bit_2, .C, 2, 8, .{}),
        0xD2 => OpCodeInfo.init(.SET, .Bit_2, .D, 2, 8, .{}),
        0xD3 => OpCodeInfo.init(.SET, .Bit_2, .E, 2, 8, .{}),
        0xD4 => OpCodeInfo.init(.SET, .Bit_2, .H, 2, 8, .{}),
        0xD5 => OpCodeInfo.init(.SET, .Bit_2, .L, 2, 8, .{}),
        0xD6 => OpCodeInfo.init(.SET, .Bit_2, .HL_Addr, 2, 16, .{}),
        0xD7 => OpCodeInfo.init(.SET, .Bit_2, .A, 2, 8, .{}),
        0xD8 => OpCodeInfo.init(.SET, .Bit_3, .B, 2, 8, .{}),
        0xD9 => OpCodeInfo.init(.SET, .Bit_3, .C, 2, 8, .{}),
        0xDA => OpCodeInfo.init(.SET, .Bit_3, .D, 2, 8, .{}),
        0xDB => OpCodeInfo.init(.SET, .Bit_3, .E, 2, 8, .{}),
        0xDC => OpCodeInfo.init(.SET, .Bit_3, .H, 2, 8, .{}),
        0xDD => OpCodeInfo.init(.SET, .Bit_3, .L, 2, 8, .{}),
        0xDE => OpCodeInfo.init(.SET, .Bit_3, .HL_Addr, 2, 16, .{}),
        0xDF => OpCodeInfo.init(.SET, .Bit_3, .A, 2, 8, .{}),
        0xE0 => OpCodeInfo.init(.SET, .Bit_4, .B, 2, 8, .{}),
        0xE1 => OpCodeInfo.init(.SET, .Bit_4, .C, 2, 8, .{}),
        0xE2 => OpCodeInfo.init(.SET, .Bit_4, .D, 2, 8, .{}),
        0xE3 => OpCodeInfo.init(.SET, .Bit_4, .E, 2, 8, .{}),
        0xE4 => OpCodeInfo.init(.SET, .Bit_4, .H, 2, 8, .{}),
        0xE5 => OpCodeInfo.init(.SET, .Bit_4, .L, 2, 8, .{}),
        0xE6 => OpCodeInfo.init(.SET, .Bit_4, .HL_Addr, 2, 16, .{}),
        0xE7 => OpCodeInfo.init(.SET, .Bit_4, .A, 2, 8, .{}),
        0xE8 => OpCodeInfo.init(.SET, .Bit_5, .B, 2, 8, .{}),
        0xE9 => OpCodeInfo.init(.SET, .Bit_5, .C, 2, 8, .{}),
        0xEA => OpCodeInfo.init(.SET, .Bit_5, .D, 2, 8, .{}),
        0xEB => OpCodeInfo.init(.SET, .Bit_5, .E, 2, 8, .{}),
        0xEC => OpCodeInfo.init(.SET, .Bit_5, .H, 2, 8, .{}),
        0xED => OpCodeInfo.init(.SET, .Bit_5, .L, 2, 8, .{}),
        0xEE => OpCodeInfo.init(.SET, .Bit_5, .HL_Addr, 2, 16, .{}),
        0xEF => OpCodeInfo.init(.SET, .Bit_5, .A, 2, 8, .{}),
        0xF0 => OpCodeInfo.init(.SET, .Bit_6, .B, 2, 8, .{}),
        0xF1 => OpCodeInfo.init(.SET, .Bit_6, .C, 2, 8, .{}),
        0xF2 => OpCodeInfo.init(.SET, .Bit_6, .D, 2, 8, .{}),
        0xF3 => OpCodeInfo.init(.SET, .Bit_6, .E, 2, 8, .{}),
        0xF4 => OpCodeInfo.init(.SET, .Bit_6, .H, 2, 8, .{}),
        0xF5 => OpCodeInfo.init(.SET, .Bit_6, .L, 2, 8, .{}),
        0xF6 => OpCodeInfo.init(.SET, .Bit_6, .HL_Addr, 2, 16, .{}),
        0xF7 => OpCodeInfo.init(.SET, .Bit_6, .A, 2, 8, .{}),
        0xF8 => OpCodeInfo.init(.SET, .Bit_7, .B, 2, 8, .{}),
        0xF9 => OpCodeInfo.init(.SET, .Bit_7, .C, 2, 8, .{}),
        0xFA => OpCodeInfo.init(.SET, .Bit_7, .D, 2, 8, .{}),
        0xFB => OpCodeInfo.init(.SET, .Bit_7, .E, 2, 8, .{}),
        0xFC => OpCodeInfo.init(.SET, .Bit_7, .H, 2, 8, .{}),
        0xFD => OpCodeInfo.init(.SET, .Bit_7, .L, 2, 8, .{}),
        0xFE => OpCodeInfo.init(.SET, .Bit_7, .HL_Addr, 2, 16, .{}),
        0xFF => OpCodeInfo.init(.SET, .Bit_7, .A, 2, 8, .{}),
    };
}

pub fn getOpCodeInfo(op_code: u8) OpCodeErrors!OpCodeInfo {

    if (comptime settings.debug) {
        std.debug.print("HANDLED opcode 0x{X}\n", .{op_code});
    }

    return switch(op_code) {
        0x00 => OpCodeInfo.init(.NOP, null, null, 1, 4, .{}),
        0x01 => OpCodeInfo.init(.LD16, .BC, .d16, 3, 12, .{}),
        0x02 => OpCodeInfo.init(.LD8, .BC_Addr, .A, 1, 8, .{}),
        0x03 => OpCodeInfo.init(.INC16, .BC, null, 1, 8, .{}),
        0x04 => OpCodeInfo.init(.INC8, .B, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent}),
        0x05 => OpCodeInfo.init(.DEC8, .B, null, 1, 4, .{.Z = .Dependent, .N = .Set, .H = .Dependent }),
        0x06 => OpCodeInfo.init(.LD8, .B, .d8, 2, 8, .{}),
        0x07 => OpCodeInfo.init(.RLC, .A, .A, 1, 4, .{ .Z = .Reset, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x08 => OpCodeInfo.init(.LD16, .d16_Addr, .SP, 3, 20, .{}),
        0x09 => OpCodeInfo.init(.ADD16, .HL, .BC, 1, 8, .{ .Z = .Unchanged, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x10 => OpCodeInfo.init(.NOP, null, null, 2, 4, .{}), // IGNORE STOP FOR NOW
        0x0A => OpCodeInfo.init(.LD8, .A, .BC_Addr, 1, 8, .{}),
        0x0B => OpCodeInfo.init(.DEC16, .BC, null, 1, 8, .{}),
        0x0C => OpCodeInfo.init(.INC8, .C, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent}),
        0x0D => OpCodeInfo.init(.DEC8, .C, null, 1, 4, .{.Z = .Dependent, .N = .Set, .H = .Dependent }),
        0x0E => OpCodeInfo.init(.LD8, .C, .d8, 2, 8, .{}),
        0x0F => OpCodeInfo.init(.RRC, .A, .A, 1, 4, .{ .Z = .Reset, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x11 => OpCodeInfo.init(.LD16, .DE, .d16, 3, 12, .{}),
        0x12 => OpCodeInfo.init(.LD8, .DE_Addr, .A, 1, 8, .{}),
        0x13 => OpCodeInfo.init(.INC16, .DE, null, 1, 8, .{}),
        0x14 => OpCodeInfo.init(.INC8, .D, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Unchanged }),
        0x15 => OpCodeInfo.init(.DEC8, .D, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Unchanged }),
        0x16 => OpCodeInfo.init(.LD8, .D, .d8, 2, 8, .{}),
        0x17 => OpCodeInfo.init(.RL, .A, .A, 1, 4, .{.Z = .Reset, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x18 => OpCodeInfo.init(.JR, .True, .r8, 2, 12, .{}),
        0x19 => OpCodeInfo.init(.ADD16, .HL, .DE, 1, 8, .{ .Z = .Unchanged, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x1A => OpCodeInfo.init(.LD8, .A, .DE_Addr, 1, 8, .{}),
        0x1C => OpCodeInfo.init(.INC8, .E, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Unchanged }),
        0x1B => OpCodeInfo.init(.DEC16, .DE, null, 1, 8, .{}),
        0x1D => OpCodeInfo.init(.DEC8, .E, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Unchanged }),
        0x1E => OpCodeInfo.init(.LD8, .E, .d8, 2, 8, .{}),
        0x1F => OpCodeInfo.init(.RR, .A, .A, 1, 4, .{.Z = .Reset, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x20 => OpCodeInfo.init(.JR, .Cond_NZ, .r8, 2, 12, .{}),
        0x21 => OpCodeInfo.init(.LD16, .HL, .d16, 3, 12, .{}),
        0x22 => OpCodeInfo.init(.LD8i, .HL_Addr, .A, 1, 8, .{}),
        0x23 => OpCodeInfo.init(.INC16, .HL, null, 1, 8, .{}),
        0x24 => OpCodeInfo.init(.INC8, .H, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent}),
        0x25 => OpCodeInfo.init(.DEC8, .H, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Unchanged }),
        0x26 => OpCodeInfo.init(.LD8, .H, .d8, 2, 8, .{}),
        0x27 => OpCodeInfo.init(.DAA, null, null, 1, 4, .{ .Z = .Dependent, .N = .Unchanged, .H = .Reset, .C = .Dependent }),
        0x28 => OpCodeInfo.init(.JR, .Cond_Z, .r8, 2, 12, .{}),
        0x29 => OpCodeInfo.init(.ADD16, .HL, .HL, 1, 8, .{ .Z = .Unchanged, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x2A => OpCodeInfo.init(.LD8i, .A, .HL_Addr, 1, 8, .{}),
        0x2B => OpCodeInfo.init(.DEC16, .HL, null, 1, 8, .{}),
        0x2C => OpCodeInfo.init(.INC8, .L, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent}),
        0x2D => OpCodeInfo.init(.DEC8, .L, null, 1, 4, .{.Z = .Dependent, .N = .Set, .H = .Dependent }),
        0x2E => OpCodeInfo.init(.LD8, .L, .d8, 2, 8, .{}),
        0x2F => OpCodeInfo.init(.CPL, null, null, 1, 4, .{ .Z = .Unchanged, .N = .Set, .H = .Set, .C = .Unchanged }),
        0x30 => OpCodeInfo.init(.JR, .Cond_NC, .r8, 2, 12, .{}),
        0x31 => OpCodeInfo.init(.LD16, .SP, .d16, 3, 12, .{}),
        0x32 => OpCodeInfo.init(.LD8d, .HL_Addr, .A, 1, 8, .{}),
        0x33 => OpCodeInfo.init(.INC16, .SP, null, 1, 8, .{}),
        0x34 => OpCodeInfo.init(.INC8, .HL_Addr, null, 1, 12, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Unchanged }),
        0x35 => OpCodeInfo.init(.DEC8, .HL_Addr, null, 1, 12, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Unchanged }),
        0x36 => OpCodeInfo.init(.LD8, .HL_Addr, .d8, 2, 12, .{}),
        0x37 => OpCodeInfo.init(.SCF, null, null, 1, 4, .{ .Z = .Unchanged, .N = .Reset, .H = .Reset, .C = .Set }),
        0x38 => OpCodeInfo.init(.JR, .Cond_C, .r8, 2, 12, .{}),
        0x39 => OpCodeInfo.init(.ADD16, .HL, .SP, 1, 8, .{ .Z = .Unchanged, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x3A => OpCodeInfo.init(.LD8d, .A, .HL_Addr, 1, 8, .{}),
        0x3B => OpCodeInfo.init(.DEC16, .SP, null, 1, 8, .{}),
        0x3C => OpCodeInfo.init(.INC8, .A, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent}),
        0x3D => OpCodeInfo.init(.DEC8, .A, null, 1, 4, .{.Z = .Dependent, .N = .Set, .H = .Dependent }),
        0x3E => OpCodeInfo.init(.LD8, .A, .d8, 2, 8, .{}),
        0x3F => OpCodeInfo.init(.CCF, null, null, 1, 4, .{ .Z = .Unchanged, .N = .Reset, .H = .Reset, .C = .Dependent }),
        0x40 => OpCodeInfo.init(.LD8, .B, .B, 1, 4, .{}),
        0x41 => OpCodeInfo.init(.LD8, .B, .C, 1, 4, .{}),
        0x42 => OpCodeInfo.init(.LD8, .B, .D, 1, 4, .{}),
        0x43 => OpCodeInfo.init(.LD8, .B, .E, 1, 4, .{}),
        0x44 => OpCodeInfo.init(.LD8, .B, .H, 1, 4, .{}),
        0x45 => OpCodeInfo.init(.LD8, .B, .L, 1, 4, .{}),
        0x46 => OpCodeInfo.init(.LD8, .B, .HL_Addr, 1, 8, .{}),
        0x47 => OpCodeInfo.init(.LD8, .B, .A, 1, 4, .{}),
        0x48 => OpCodeInfo.init(.LD8, .C, .B, 1, 4, .{}),
        0x49 => OpCodeInfo.init(.LD8, .C, .C, 1, 4, .{}),
        0x4A => OpCodeInfo.init(.LD8, .C, .D, 1, 4, .{}),
        0x4B => OpCodeInfo.init(.LD8, .C, .E, 1, 4, .{}),
        0x4C => OpCodeInfo.init(.LD8, .C, .H, 1, 4, .{}),
        0x4D => OpCodeInfo.init(.LD8, .C, .L, 1, 4, .{}),
        0x4E => OpCodeInfo.init(.LD8, .C, .HL_Addr, 1, 8, .{}),
        0x4F => OpCodeInfo.init(.LD8, .C, .A, 1, 4, .{}),
        0x50 => OpCodeInfo.init(.LD8, .D, .B, 1, 4, .{}),
        0x51 => OpCodeInfo.init(.LD8, .D, .C, 1, 4, .{}),
        0x52 => OpCodeInfo.init(.LD8, .D, .D, 1, 4, .{}),
        0x53 => OpCodeInfo.init(.LD8, .D, .E, 1, 4, .{}),
        0x54 => OpCodeInfo.init(.LD8, .D, .H, 1, 4, .{}),
        0x55 => OpCodeInfo.init(.LD8, .D, .L, 1, 4, .{}),
        0x56 => OpCodeInfo.init(.LD8, .D, .HL_Addr, 1, 8, .{}),
        0x57 => OpCodeInfo.init(.LD8, .D, .A, 1, 4, .{}),
        0x58 => OpCodeInfo.init(.LD8, .E, .B, 1, 4, .{}),
        0x59 => OpCodeInfo.init(.LD8, .E, .C, 1, 4, .{}),
        0x5A => OpCodeInfo.init(.LD8, .E, .D, 1, 4, .{}),
        0x5B => OpCodeInfo.init(.LD8, .E, .E, 1, 4, .{}),
        0x5C => OpCodeInfo.init(.LD8, .E, .H, 1, 4, .{}),
        0x5D => OpCodeInfo.init(.LD8, .E, .L, 1, 4, .{}),
        0x5E => OpCodeInfo.init(.LD8, .E, .HL_Addr, 1, 8, .{}),
        0x5F => OpCodeInfo.init(.LD8, .E, .A, 1, 4, .{}),
        0x60 => OpCodeInfo.init(.LD8, .H, .B, 1, 4, .{}),
        0x61 => OpCodeInfo.init(.LD8, .H, .C, 1, 4, .{}),
        0x62 => OpCodeInfo.init(.LD8, .H, .D, 1, 4, .{}),
        0x63 => OpCodeInfo.init(.LD8, .H, .E, 1, 4, .{}),
        0x64 => OpCodeInfo.init(.LD8, .H, .H, 1, 4, .{}),
        0x65 => OpCodeInfo.init(.LD8, .H, .L, 1, 4, .{}),
        0x66 => OpCodeInfo.init(.LD8, .H, .HL_Addr, 1, 8, .{}),
        0x67 => OpCodeInfo.init(.LD8, .H, .A, 1, 4, .{}),
        0x68 => OpCodeInfo.init(.LD8, .L, .B, 1, 4, .{}),
        0x69 => OpCodeInfo.init(.LD8, .L, .C, 1, 4, .{}),
        0x6A => OpCodeInfo.init(.LD8, .L, .D, 1, 4, .{}),
        0x6B => OpCodeInfo.init(.LD8, .L, .E, 1, 4, .{}),
        0x6C => OpCodeInfo.init(.LD8, .L, .H, 1, 4, .{}),
        0x6D => OpCodeInfo.init(.LD8, .L, .L, 1, 4, .{}),
        0x6E => OpCodeInfo.init(.LD8, .L, .HL_Addr, 1, 8, .{}),
        0x6F => OpCodeInfo.init(.LD8, .L, .A, 1, 4, .{}),
        0x70 => OpCodeInfo.init(.LD8, .HL_Addr, .B, 1, 8, .{}),
        0x71 => OpCodeInfo.init(.LD8, .HL_Addr, .C, 1, 8, .{}),
        0x72 => OpCodeInfo.init(.LD8, .HL_Addr, .D, 1, 8, .{}),
        0x73 => OpCodeInfo.init(.LD8, .HL_Addr, .E, 1, 8, .{}),
        0x74 => OpCodeInfo.init(.LD8, .HL_Addr, .H, 1, 8, .{}),
        0x75 => OpCodeInfo.init(.LD8, .HL_Addr, .L, 1, 8, .{}),
        0x76 => OpCodeInfo.init(.HALT, null, null, 1, 4, .{}),
        0x77 => OpCodeInfo.init(.LD8, .HL_Addr, .A, 1, 8, .{}),
        0x78 => OpCodeInfo.init(.LD8, .A, .B, 1, 4, .{}),
        0x79 => OpCodeInfo.init(.LD8, .A, .C, 1, 4, .{}),
        0x7A => OpCodeInfo.init(.LD8, .A, .D, 1, 4, .{}),
        0x7B => OpCodeInfo.init(.LD8, .A, .E, 1, 4, .{}),
        0x7C => OpCodeInfo.init(.LD8, .A, .H, 1, 4, .{}),
        0x7D => OpCodeInfo.init(.LD8, .A, .L, 1, 4, .{}),
        0x7E => OpCodeInfo.init(.LD8, .A, .HL_Addr, 1, 8, .{}),
        0x7F => OpCodeInfo.init(.LD8, .A, .A, 1, 4, .{}),
        0x80 => OpCodeInfo.init(.ADD8, .A, .B, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x81 => OpCodeInfo.init(.ADD8, .A, .C, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x82 => OpCodeInfo.init(.ADD8, .A, .D, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x83 => OpCodeInfo.init(.ADD8, .A, .E, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x84 => OpCodeInfo.init(.ADD8, .A, .H, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x85 => OpCodeInfo.init(.ADD8, .A, .L, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x86 => OpCodeInfo.init(.ADD8, .A, .HL_Addr, 1, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent}),
        0x87 => OpCodeInfo.init(.ADD8, .A, .A, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x88 => OpCodeInfo.init(.ADC, .A, .B, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x89 => OpCodeInfo.init(.ADC, .A, .C, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x8A => OpCodeInfo.init(.ADC, .A, .D, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x8B => OpCodeInfo.init(.ADC, .A, .E, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x8C => OpCodeInfo.init(.ADC, .A, .H, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x8D => OpCodeInfo.init(.ADC, .A, .L, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x8E => OpCodeInfo.init(.ADC, .A, .HL_Addr, 1, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x8F => OpCodeInfo.init(.ADC, .A, .A, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0x90 => OpCodeInfo.init(.SUB, .B, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x91 => OpCodeInfo.init(.SUB, .C, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x92 => OpCodeInfo.init(.SUB, .D, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x93 => OpCodeInfo.init(.SUB, .E, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x94 => OpCodeInfo.init(.SUB, .H, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x95 => OpCodeInfo.init(.SUB, .L, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x96 => OpCodeInfo.init(.SUB, .HL_Addr, null, 1, 8, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x97 => OpCodeInfo.init(.SUB, .A, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x98 => OpCodeInfo.init(.SBC, .A, .B, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x99 => OpCodeInfo.init(.SBC, .A, .C, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x9A => OpCodeInfo.init(.SBC, .A, .D, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x9B => OpCodeInfo.init(.SBC, .A, .E, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x9C => OpCodeInfo.init(.SBC, .A, .H, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x9D => OpCodeInfo.init(.SBC, .A, .L, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x9E => OpCodeInfo.init(.SBC, .A, .HL_Addr, 1, 8, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0x9F => OpCodeInfo.init(.SBC, .A, .A, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xA0 => OpCodeInfo.init(.AND, .B, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset }),
        0xA1 => OpCodeInfo.init(.AND, .C, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset }),
        0xA2 => OpCodeInfo.init(.AND, .D, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset }),
        0xA3 => OpCodeInfo.init(.AND, .E, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset }),
        0xA4 => OpCodeInfo.init(.AND, .H, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset }),
        0xA5 => OpCodeInfo.init(.AND, .L, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset }),
        0xA6 => OpCodeInfo.init(.AND, .HL_Addr, null, 1, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset }),
        0xA7 => OpCodeInfo.init(.AND, .A, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset}),
        0xA8 => OpCodeInfo.init(.XOR, .B, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xA9 => OpCodeInfo.init(.XOR, .C, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xAA => OpCodeInfo.init(.XOR, .D, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xAB => OpCodeInfo.init(.XOR, .E, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xAC => OpCodeInfo.init(.XOR, .H, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xAD => OpCodeInfo.init(.XOR, .L, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xAE => OpCodeInfo.init(.XOR, .HL_Addr, null, 1, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xAF => OpCodeInfo.init(.XOR, .A, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB0 => OpCodeInfo.init(.OR, .B, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB1 => OpCodeInfo.init(.OR, .C, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB2 => OpCodeInfo.init(.OR, .D, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB3 => OpCodeInfo.init(.OR, .E, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB4 => OpCodeInfo.init(.OR, .H, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB5 => OpCodeInfo.init(.OR, .L, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB6 => OpCodeInfo.init(.OR, .HL_Addr, null, 1, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB7 => OpCodeInfo.init(.OR, .A, null, 1, 4, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xB8 => OpCodeInfo.init(.CP, .B, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xB9 => OpCodeInfo.init(.CP, .C, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xBA => OpCodeInfo.init(.CP, .D, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xBB => OpCodeInfo.init(.CP, .E, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xBC => OpCodeInfo.init(.CP, .H, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xBD => OpCodeInfo.init(.CP, .L, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xBE => OpCodeInfo.init(.CP, .HL_Addr, null, 1, 8, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xBF => OpCodeInfo.init(.CP, .A, null, 1, 4, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xC0 => OpCodeInfo.init(.RET, .Cond_NZ, null, 1, 20, .{}),
        0xC1 => OpCodeInfo.init(.POP, .BC, null, 1, 12, .{}),
        0xC2 => OpCodeInfo.init(.JP, .Cond_NZ, .d16, 3, 16, .{}),
        0xC3 => OpCodeInfo.init(.JP, .d16, null, 3, 16, .{}),
        0xC4 => OpCodeInfo.init(.CALL, .Cond_NZ, .d16, 3, 24, .{}),
        0xC5 => OpCodeInfo.init(.PUSH, .BC, null, 1, 16, .{}),
        0xC6 => OpCodeInfo.init(.ADD8, .A, .d8, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent}),
        0xC7 => OpCodeInfo.init(.RST, .Hex_00, null, 1, 16, .{}),
        0xC8 => OpCodeInfo.init(.RET, .Cond_Z, null, 1, 20, .{}),
        0xC9 => OpCodeInfo.init(.RET, null, null, 1, 16, .{}),
        0xCA => OpCodeInfo.init(.JP, .Cond_Z, .d16, 3, 16, .{}),
        0xCC => OpCodeInfo.init(.CALL, .Cond_Z, .d16, 3, 24, .{}),
        0xCD => OpCodeInfo.init(.CALL, .d16, null, 3, 24, .{}),
        0xCE => OpCodeInfo.init(.ADC, .A, .d8, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Dependent, .C = .Dependent}),
        0xCF => OpCodeInfo.init(.RST, .Hex_08, null, 1, 16, .{}),
        0xD0 => OpCodeInfo.init(.RET, .Cond_NC, null, 1, 20, .{}),
        0xD1 => OpCodeInfo.init(.POP, .DE, null, 1, 12, .{}),
        0xD2 => OpCodeInfo.init(.JP, .Cond_NC, .d16, 3, 16, .{}),
        0xD4 => OpCodeInfo.init(.CALL, .Cond_NC, .d16, 3, 24, .{}),
        0xD5 => OpCodeInfo.init(.PUSH, .DE, null, 1, 16, .{}),
        0xD6 => OpCodeInfo.init(.SUB, .d8, null, 2, 8, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent}),
        0xD7 => OpCodeInfo.init(.RST, .Hex_10, null, 1, 16, .{}),
        0xD8 => OpCodeInfo.init(.RET, .Cond_C, null, 1, 20, .{}),
        0xD9 => OpCodeInfo.init(.RETI, null, null, 1, 16, .{}),
        0xDA => OpCodeInfo.init(.JP, .Cond_C, .d16, 3, 16, .{}),
        0xDC => OpCodeInfo.init(.CALL, .Cond_C, .d16, 3, 24, .{}),
        0xDF => OpCodeInfo.init(.RST, .Hex_18, null, 1, 16, .{}),
        0xDE => OpCodeInfo.init(.SBC, .A, .d8, 2, 8, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent }),
        0xE0 => OpCodeInfo.init(.LD8io_to, .d8, .A, 2, 12, .{}),
        0xE1 => OpCodeInfo.init(.POP, .HL, null, 1, 12, .{}),
        0xE2 => OpCodeInfo.init(.LD8io_to, .C, .A, 1, 8, .{}),
        0xE5 => OpCodeInfo.init(.PUSH, .HL, null, 1, 16, .{}),
        0xE6 => OpCodeInfo.init(.AND, .d8, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Set, .C = .Reset}),
        0xE7 => OpCodeInfo.init(.RST, .Hex_20, null, 1, 16, .{}),
        0xE8 => OpCodeInfo.init(.ADD16_SPi8, .SP, .r8, 2, 16, .{ .Z = .Reset, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0xE9 => OpCodeInfo.init(.JP, .HL, null, 1, 4, .{}),
        0xEA => OpCodeInfo.init(.LD8, .d16_Addr, .A, 3, 16, .{}),
        0xEE => OpCodeInfo.init(.XOR, .d8, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xEF => OpCodeInfo.init(.RST, .Hex_28, null, 1, 16, .{}),
        0xF0 => OpCodeInfo.init(.LD8io_from, .A, .d8, 2, 12, .{}),
        0xF1 => OpCodeInfo.init(.POP, .AF, null, 1, 12, .{}),
        0xF2 => OpCodeInfo.init(.LD8io_from, .A, .C, 1, 8, .{}),
        0xF3 => OpCodeInfo.init(.DI, null, null, 1, 4, .{}),
        0xF5 => OpCodeInfo.init(.PUSH, .AF, null, 1, 16, .{}),
        0xF6 => OpCodeInfo.init(.OR, .d8, null, 2, 8, .{ .Z = .Dependent, .N = .Reset, .H = .Reset, .C = .Reset }),
        0xF7 => OpCodeInfo.init(.RST, .Hex_30, null, 1, 16, .{}),
        0xF8 => OpCodeInfo.init(.ADD16_SPi8, .HL, .r8, 2, 12, .{ .Z = .Reset, .N = .Reset, .H = .Dependent, .C = .Dependent }),
        0xF9 => OpCodeInfo.init(.LD16, .SP, .HL, 1, 8, .{}),
        0xFA => OpCodeInfo.init(.LD8, .A, .d16_Addr, 3, 16, .{}),
        0xFB => OpCodeInfo.init(.EI, null, null, 1, 4, .{}),
        0xFE => OpCodeInfo.init(.CP, .d8, null, 2, 8, .{ .Z = .Dependent, .N = .Set, .H = .Dependent, .C = .Dependent}),
        0xFF => OpCodeInfo.init(.RST, .Hex_38, null, 1, 16, .{}),
        else => blk: {
            std.debug.print("Unhandled opcode 0x{X}\n", .{op_code});
            break :blk OpCodeErrors.UnknownOpCode;
        },
    };
}